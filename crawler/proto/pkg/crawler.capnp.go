// Code generated by capnpc-go. DO NOT EDIT.

package pkg

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Crawler capnp.Client

// Crawler_TypeID is the unique identifier for the type Crawler.
const Crawler_TypeID = 0xafed6e9997562ac8

func (c Crawler) Crawl(ctx context.Context, params func(Crawler_crawl_Params) error) (Crawler_crawl_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xafed6e9997562ac8,
			MethodID:      0,
			InterfaceName: "crawler.capnp:Crawler",
			MethodName:    "crawl",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Crawler_crawl_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Crawler_crawl_Results_Future{Future: ans.Future()}, release

}

func (c Crawler) AddWorker(ctx context.Context, params func(Crawler_addWorker_Params) error) (Crawler_addWorker_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xafed6e9997562ac8,
			MethodID:      1,
			InterfaceName: "crawler.capnp:Crawler",
			MethodName:    "addWorker",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Crawler_addWorker_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Crawler_addWorker_Results_Future{Future: ans.Future()}, release

}

func (c Crawler) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Crawler) String() string {
	return "Crawler(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Crawler) AddRef() Crawler {
	return Crawler(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Crawler) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Crawler) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Crawler) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Crawler) DecodeFromPtr(p capnp.Ptr) Crawler {
	return Crawler(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Crawler) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Crawler) IsSame(other Crawler) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Crawler) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Crawler) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Crawler_Server is a Crawler with a local implementation.
type Crawler_Server interface {
	Crawl(context.Context, Crawler_crawl) error

	AddWorker(context.Context, Crawler_addWorker) error
}

// Crawler_NewServer creates a new Server from an implementation of Crawler_Server.
func Crawler_NewServer(s Crawler_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Crawler_Methods(nil, s), s, c)
}

// Crawler_ServerToClient creates a new Client from an implementation of Crawler_Server.
// The caller is responsible for calling Release on the returned Client.
func Crawler_ServerToClient(s Crawler_Server) Crawler {
	return Crawler(capnp.NewClient(Crawler_NewServer(s)))
}

// Crawler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Crawler_Methods(methods []server.Method, s Crawler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xafed6e9997562ac8,
			MethodID:      0,
			InterfaceName: "crawler.capnp:Crawler",
			MethodName:    "crawl",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Crawl(ctx, Crawler_crawl{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xafed6e9997562ac8,
			MethodID:      1,
			InterfaceName: "crawler.capnp:Crawler",
			MethodName:    "addWorker",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddWorker(ctx, Crawler_addWorker{call})
		},
	})

	return methods
}

// Crawler_crawl holds the state for a server call to Crawler.crawl.
// See server.Call for documentation.
type Crawler_crawl struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Crawler_crawl) Args() Crawler_crawl_Params {
	return Crawler_crawl_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Crawler_crawl) AllocResults() (Crawler_crawl_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Crawler_crawl_Results(r), err
}

// Crawler_addWorker holds the state for a server call to Crawler.addWorker.
// See server.Call for documentation.
type Crawler_addWorker struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Crawler_addWorker) Args() Crawler_addWorker_Params {
	return Crawler_addWorker_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Crawler_addWorker) AllocResults() (Crawler_addWorker_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crawler_addWorker_Results(r), err
}

// Crawler_List is a list of Crawler.
type Crawler_List = capnp.CapList[Crawler]

// NewCrawler creates a new list of Crawler.
func NewCrawler_List(s *capnp.Segment, sz int32) (Crawler_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Crawler](l), err
}

type Crawler_crawl_Params capnp.Struct

// Crawler_crawl_Params_TypeID is the unique identifier for the type Crawler_crawl_Params.
const Crawler_crawl_Params_TypeID = 0xc772cf1947fe73f8

func NewCrawler_crawl_Params(s *capnp.Segment) (Crawler_crawl_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crawler_crawl_Params(st), err
}

func NewRootCrawler_crawl_Params(s *capnp.Segment) (Crawler_crawl_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crawler_crawl_Params(st), err
}

func ReadRootCrawler_crawl_Params(msg *capnp.Message) (Crawler_crawl_Params, error) {
	root, err := msg.Root()
	return Crawler_crawl_Params(root.Struct()), err
}

func (s Crawler_crawl_Params) String() string {
	str, _ := text.Marshal(0xc772cf1947fe73f8, capnp.Struct(s))
	return str
}

func (s Crawler_crawl_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crawler_crawl_Params) DecodeFromPtr(p capnp.Ptr) Crawler_crawl_Params {
	return Crawler_crawl_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crawler_crawl_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crawler_crawl_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crawler_crawl_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crawler_crawl_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Crawler_crawl_Params) Url() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Crawler_crawl_Params) HasUrl() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Crawler_crawl_Params) UrlBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Crawler_crawl_Params) SetUrl(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Crawler_crawl_Params_List is a list of Crawler_crawl_Params.
type Crawler_crawl_Params_List = capnp.StructList[Crawler_crawl_Params]

// NewCrawler_crawl_Params creates a new list of Crawler_crawl_Params.
func NewCrawler_crawl_Params_List(s *capnp.Segment, sz int32) (Crawler_crawl_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Crawler_crawl_Params](l), err
}

// Crawler_crawl_Params_Future is a wrapper for a Crawler_crawl_Params promised by a client call.
type Crawler_crawl_Params_Future struct{ *capnp.Future }

func (f Crawler_crawl_Params_Future) Struct() (Crawler_crawl_Params, error) {
	p, err := f.Future.Ptr()
	return Crawler_crawl_Params(p.Struct()), err
}

type Crawler_crawl_Results capnp.Struct

// Crawler_crawl_Results_TypeID is the unique identifier for the type Crawler_crawl_Results.
const Crawler_crawl_Results_TypeID = 0xbfcd4561b12b1eca

func NewCrawler_crawl_Results(s *capnp.Segment) (Crawler_crawl_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Crawler_crawl_Results(st), err
}

func NewRootCrawler_crawl_Results(s *capnp.Segment) (Crawler_crawl_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Crawler_crawl_Results(st), err
}

func ReadRootCrawler_crawl_Results(msg *capnp.Message) (Crawler_crawl_Results, error) {
	root, err := msg.Root()
	return Crawler_crawl_Results(root.Struct()), err
}

func (s Crawler_crawl_Results) String() string {
	str, _ := text.Marshal(0xbfcd4561b12b1eca, capnp.Struct(s))
	return str
}

func (s Crawler_crawl_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crawler_crawl_Results) DecodeFromPtr(p capnp.Ptr) Crawler_crawl_Results {
	return Crawler_crawl_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crawler_crawl_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crawler_crawl_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crawler_crawl_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crawler_crawl_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Crawler_crawl_Results) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Crawler_crawl_Results) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Crawler_crawl_Results) Urls() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Crawler_crawl_Results) HasUrls() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Crawler_crawl_Results) SetUrls(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewUrls sets the urls field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Crawler_crawl_Results) NewUrls(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Crawler_crawl_Results_List is a list of Crawler_crawl_Results.
type Crawler_crawl_Results_List = capnp.StructList[Crawler_crawl_Results]

// NewCrawler_crawl_Results creates a new list of Crawler_crawl_Results.
func NewCrawler_crawl_Results_List(s *capnp.Segment, sz int32) (Crawler_crawl_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Crawler_crawl_Results](l), err
}

// Crawler_crawl_Results_Future is a wrapper for a Crawler_crawl_Results promised by a client call.
type Crawler_crawl_Results_Future struct{ *capnp.Future }

func (f Crawler_crawl_Results_Future) Struct() (Crawler_crawl_Results, error) {
	p, err := f.Future.Ptr()
	return Crawler_crawl_Results(p.Struct()), err
}

type Crawler_addWorker_Params capnp.Struct

// Crawler_addWorker_Params_TypeID is the unique identifier for the type Crawler_addWorker_Params.
const Crawler_addWorker_Params_TypeID = 0xe6cd57ce8d53b096

func NewCrawler_addWorker_Params(s *capnp.Segment) (Crawler_addWorker_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Crawler_addWorker_Params(st), err
}

func NewRootCrawler_addWorker_Params(s *capnp.Segment) (Crawler_addWorker_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Crawler_addWorker_Params(st), err
}

func ReadRootCrawler_addWorker_Params(msg *capnp.Message) (Crawler_addWorker_Params, error) {
	root, err := msg.Root()
	return Crawler_addWorker_Params(root.Struct()), err
}

func (s Crawler_addWorker_Params) String() string {
	str, _ := text.Marshal(0xe6cd57ce8d53b096, capnp.Struct(s))
	return str
}

func (s Crawler_addWorker_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crawler_addWorker_Params) DecodeFromPtr(p capnp.Ptr) Crawler_addWorker_Params {
	return Crawler_addWorker_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crawler_addWorker_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crawler_addWorker_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crawler_addWorker_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crawler_addWorker_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Crawler_addWorker_Params) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Crawler_addWorker_Params) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Crawler_addWorker_Params) Worker() Crawler {
	p, _ := capnp.Struct(s).Ptr(0)
	return Crawler(p.Interface().Client())
}

func (s Crawler_addWorker_Params) HasWorker() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Crawler_addWorker_Params) SetWorker(v Crawler) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Crawler_addWorker_Params_List is a list of Crawler_addWorker_Params.
type Crawler_addWorker_Params_List = capnp.StructList[Crawler_addWorker_Params]

// NewCrawler_addWorker_Params creates a new list of Crawler_addWorker_Params.
func NewCrawler_addWorker_Params_List(s *capnp.Segment, sz int32) (Crawler_addWorker_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Crawler_addWorker_Params](l), err
}

// Crawler_addWorker_Params_Future is a wrapper for a Crawler_addWorker_Params promised by a client call.
type Crawler_addWorker_Params_Future struct{ *capnp.Future }

func (f Crawler_addWorker_Params_Future) Struct() (Crawler_addWorker_Params, error) {
	p, err := f.Future.Ptr()
	return Crawler_addWorker_Params(p.Struct()), err
}
func (p Crawler_addWorker_Params_Future) Worker() Crawler {
	return Crawler(p.Future.Field(0, nil).Client())
}

type Crawler_addWorker_Results capnp.Struct

// Crawler_addWorker_Results_TypeID is the unique identifier for the type Crawler_addWorker_Results.
const Crawler_addWorker_Results_TypeID = 0xdf8e360f60ae94f2

func NewCrawler_addWorker_Results(s *capnp.Segment) (Crawler_addWorker_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crawler_addWorker_Results(st), err
}

func NewRootCrawler_addWorker_Results(s *capnp.Segment) (Crawler_addWorker_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crawler_addWorker_Results(st), err
}

func ReadRootCrawler_addWorker_Results(msg *capnp.Message) (Crawler_addWorker_Results, error) {
	root, err := msg.Root()
	return Crawler_addWorker_Results(root.Struct()), err
}

func (s Crawler_addWorker_Results) String() string {
	str, _ := text.Marshal(0xdf8e360f60ae94f2, capnp.Struct(s))
	return str
}

func (s Crawler_addWorker_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crawler_addWorker_Results) DecodeFromPtr(p capnp.Ptr) Crawler_addWorker_Results {
	return Crawler_addWorker_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crawler_addWorker_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crawler_addWorker_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crawler_addWorker_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crawler_addWorker_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Crawler_addWorker_Results_List is a list of Crawler_addWorker_Results.
type Crawler_addWorker_Results_List = capnp.StructList[Crawler_addWorker_Results]

// NewCrawler_addWorker_Results creates a new list of Crawler_addWorker_Results.
func NewCrawler_addWorker_Results_List(s *capnp.Segment, sz int32) (Crawler_addWorker_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Crawler_addWorker_Results](l), err
}

// Crawler_addWorker_Results_Future is a wrapper for a Crawler_addWorker_Results promised by a client call.
type Crawler_addWorker_Results_Future struct{ *capnp.Future }

func (f Crawler_addWorker_Results_Future) Struct() (Crawler_addWorker_Results, error) {
	p, err := f.Future.Ptr()
	return Crawler_addWorker_Results(p.Struct()), err
}

const schema_faa0f0935d698e21 = "x\xda\x84\x92\xbb\x8b\x13Q\x18\xc5\xcf\xb9w\xe2\xcc\xc2" +
	">\xbc\xcc\xb2\xb0[\x18\\\"\xb8++FE0M" +
	"\xe2\x0b\xdb\xb9+\xb8\x95\xe0\xb0I\xb18\x89\xe1N\x86" +
	"\xc1\xc2\xda\xca4\x8ab\xe7_\xe0\x0b,\xc5R\x11\xa2" +
	"\x7f\x82\x9d\x85 \x88\x95Xx\xe5N\x9c\xd1\x14\xba\xdd" +
	"\xf7}s\xe6w\xce\x81{\xf0s\xc7k.\xd4%\x84" +
	"n\xd4\x0e\xd8\xb7\x9bW\x1f>\x1a|y\x0a\xb5(\xed" +
	"\xe1\xf1\xde\xb5{_\x1f\xff\x00\x18f|\x11\xde\xa6\x0f" +
	"\x84\xb7x'\x9c\xb8\xc9\xbe;t\xecy|i\xf2\x1a" +
	"z\x85\x04j\xeex\xea%\xd7\x09\x86\xaf\x98\x83\xf6{" +
	"\xfa\xf3\xf2\xea\x07\xf3\x06j\xa5\x12l\x885'h\x8a" +
	"6h\xbf\xdd\x7fr}\xe9\xcc\xf8\xe3T\xe0\xb9\xefZ" +
	"\x9c'<\xfb\xe0\xd9\x95\xbb\xefw&\x9ff\xe0gE" +
	"\xcb\xfd{N\xe4\xd8\xb2\xbb&\xce\x93\x9e9\xce\xddx" +
	"8\x18\xb6.\x98z\xb1G\xa4\x0ed\x0d\xa8\xdcY\x06" +
	"U\xcd\x93\x10\xea\x88OVx\x96\x09\xd4\xea6\x84R" +
	"~\xbd\xc0vh\xe3nw\xe7\xa6\xb9\xd1\x03M\x87\x11" +
	"Y\xf9\xc9\xd2o\xba\x16\xe7\xc6v/\xcd\xfcd\x94\xea" +
	"@z\x80G@m\xac\x01\xba!\xa9O\x08\x92\xcb\xae" +
	"\x85\xda\xda\x04\xf4QI}QP\xeeu9\x07\xc19" +
	"p)3I\xcaE0\x92\xe4<\x84\x1b\xff\xef\x17\xc5" +
	"&\x96\xfdT{\x95\xdd\xc2:\xa0\x03I\xbd,\xe8g" +
	"&)8\xf3\x7fq\x82YN\xd9\xcf\x14\xd9\x93Q\x8a" +
	"R\xf8/]\xdb\x99\xf6\xf7\xad\xd8\xfa]\xf1\xf4L\xc5" +
	"v^@\xa8\xfe\xbc1\x90\x0a\xfc\x15\x00\x00\xff\xff\xf5" +
	",\xa7*"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_faa0f0935d698e21,
		Nodes: []uint64{
			0xafed6e9997562ac8,
			0xbfcd4561b12b1eca,
			0xc772cf1947fe73f8,
			0xdf8e360f60ae94f2,
			0xe6cd57ce8d53b096,
		},
		Compressed: true,
	})
}
